#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int data;
    struct Node *left,*right;
};

struct Node *root;

struct Node* newnode(int x)
{
    struct Node*temp=(struct Node*)malloc(sizeof(struct Node));
    temp->data=x;
    temp->left=temp->right=NULL;
    return temp;
}

void inorder (struct Node *root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        printf("%d\n",root->data);
        inorder(root->right);
    }
}

int search(struct Node*root,int data)
{
    if(root==NULL)
    {
        return 0;
    }
    else if(root->data==data)
    {
        return 1;
    }
    else if(data <= root->data)
    {
        return search(root->left,data);
    }
    else if(data>=root->data)
    {
        return search(root->right,data);
    }
}
struct Node* insert(struct Node* root,int data)
{
    if(root==NULL)
    {
        return newnode(data);
    }
    else if(data < root->data)
    {
        root->left = insert(root->left,data);
    }
    else if(data > root->data)
    {
        root->right = insert(root->right,data);
    }
    
    return root;
}

struct Node *findmin(struct Node* root)
{
    struct Node*temp=root;
    while(temp && temp->left !=NULL)
    {
        temp=temp->left;
    }
    return temp;
}

struct Node* delete(struct Node *root,int data)
{
    if(root==NULL)
    {
        return root;
    }
    else if(data < root->data)
    {
        root->left=delete(root->left,data);
    }
    else if(data > root->data)
    {
        root->right=delete(root->right,data);
    }
    else
    {
        if(root->left==NULL)
        {
            struct Node* temp=root->right;
            free(root);
            return temp;
        }
        else if(root->right==NULL)
        {
            struct Node* temp=root->left;
            free(root);
            return temp;
        }
        
        struct Node *temp=findmin(root->right);
        root->data=temp->data;
        root->right=delete(root->right,temp->data);
    }
    return root;
}
int main()
{
    int x;
    root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);
  
    // print inoder traversal of the BST
    printf("Inorder:\n");
    inorder(root);
    
    printf("\nEnter element to be searched: ");
    scanf("%d",&x);
    printf("%d",x);
    
    if(search(root,x))
    {
        printf("\nelement found");
    }
    else
    {
        printf("\nelement not found");
    }
    
    printf("\nDelete 30\n"); 
    root = delete(root, 30); 
    printf("Inorder traversal of the modified tree \n"); 
    inorder(root); 
  
    return 0;
}
